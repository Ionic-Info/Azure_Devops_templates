name: terraform

on:
  workflow_call:
    inputs:
      opa_blast_radius:
        description: 'OPA Blast Radius'
        required: false
        type: string
        default: "50"
      ENVIRONMENTS:
        description: '{"environments":[{"name":"dev"}, {"name":"qa"}]}'
        required: true
        type: string
      DIR:
        required: true
        type: string
      VALIDATE_ENABLED:
        required: false
        default: "true"
        type: string
    secrets:
      AZURE_CREDENTIALS_dev:
        required: false
      AZURE_CREDENTIALS_qa:
        required: false
      AZURE_CREDENTIALS_prod:
        required: false

env:
  DIR: ${{ inputs.DIR }}

jobs:
  set_env_matrix:
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Set matrix for environment
        id: set-matrix
        run: |
          set -e
          echo '${{ inputs.ENVIRONMENTS }}' | jq .
          MATRIX=$(echo '${{ inputs.ENVIRONMENTS }}' | jq -c .)
          echo "::set-output name=matrix::${MATRIX}"

  terraform_plan:
    needs: set_env_matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.set_env_matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    steps:
      - name: Create secret name
        id: my_string
        run: |
          AZURE_CREDS=AZURE_CREDENTIALS_${{ matrix.environments.name }}
          echo $AZURE_CREDS
          echo "::set-output name=content::$AZURE_CREDS"

      - name: Azure Login
        uses: azure/login@v1
        with:
          # creds: ${{ secrets.steps.my_string.outputs.content }}
          creds: ${{ secrets.AZURE_CREDENTIALS_dev }}
          enable-AzPSSession: true
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform plan
        env:
          ENV: ${{ matrix.environments.name }}
          OPA_BLAST_RADIUS: ${{ github.event.inputs.OPA_BLAST_RADIUS }}
        run: |
          set -e
          if [ -n "${OPA_BLAST_RADIUS}" ] && [ "${OPA_BLAST_RADIUS}" -eq "${OPA_BLAST_RADIUS}" ] 2>/dev/null; then
            echo OPA_BLAST_RADIUS: ${OPA_BLAST_RADIUS}
          else
            export OPA_BLAST_RADIUS=50
            echo OPA_BLAST_RADIUS: ${OPA_BLAST_RADIUS}
          fi

          # TODO clean up env
          env
          ls -la ${HOME}/.azure
          ls -la $GITHUB_WORKSPACE
          ls -la $GITHUB_WORKFLOW
          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"

          make prepare

          if [[ "${{ inputs.VALIDATE_ENABLED }}" -eq "True" || "${{ inputs.VALIDATE_ENABLED }}" -eq "true" ]]; then
            make validate
            if [[ $(git status --porcelain) ]]; then
              git diff
              echo 'run make validate and commit changes' 1>&2
              exit 1
            fi
          fi
          make plan

      - name: Upload artifact (encrypted plan)
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.environments.name }}-plan
          path: ${{ env.DIR }}/.terraform/plans/${{ matrix.environments.name }}.enc
          if-no-files-found: error

  terraform_apply:
    needs: [set_env_matrix, terraform_plan]
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix: ${{fromJson(needs.set_env_matrix.outputs.matrix)}}
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Fix directory permissions
        run: |
          set -e
          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
          mkdir -p $AZURE_CONFIG_DIR
          sudo chown -R $(id -u):$(id -g) ${AZURE_CONFIG_DIR}
          sudo chown -R $(id -u):$(id -g) ${PWD}

      - name: Create secret name
        id: my_string
        run: |
          AZURE_CREDS=AZURE_CREDENTIALS_${{ matrix.environments.name }}
          echo $AZURE_CREDS
          echo "::set-output name=content::$AZURE_CREDS"
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.steps.my_string.outputs.content }}
          enable-AzPSSession: true

      - name: Checkout
        uses: actions/checkout@v2

      - name: Create Terraform plan folder
        env:
          TERRAFORM_PLAN_FOLDER: ${{ env.DIR }}/.terraform/plans/
        run: |
          mkdir -p ${TERRAFORM_PLAN_FOLDER}
      - name: Download artifact (encrypted plan)
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.environments.name }}-plan
          path: ${{ env.DIR }}/.terraform/plans/

      - name: Terraform apply
        env:
          ENV: ${{ matrix.environments.name }}
        run: |
          # pre github actions
          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
          make apply DIR=${DIR} ENV=${ENV}
