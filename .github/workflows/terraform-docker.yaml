name: terraform

on:
  workflow_call:
    inputs:
      opa_blast_radius:
        description: 'OPA Blast Radius'
        required: false
        type: string
        default: "50"
      ENVIRONMENTS:
        default: '{"environments":[{"name":"dev"}]}'
        required: true
        type: string
      DIR:
        required: true
        type: string
      VALIDATE_ENABLED:
        required: false
        default: "true"
        type: string
    secrets:
      AZ_APP_ID:
        required: true
      AZ_APP_SECRET:
        required: true
      TENANT_ID:
        required: true
      SUB_IDS:
        required: true

env:
  DIR: ${{ inputs.DIR }}

jobs:
  set_env_matrix:
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Set matrix for environment
        id: set-matrix
        run: |
          set -e
          echo '${{ inputs.ENVIRONMENTS }}' | jq .
          MATRIX=$(echo '${{ inputs.ENVIRONMENTS }}' | jq -c .)
          echo "::set-output name=matrix::${MATRIX}"

  terraform_plan:
    needs: set_env_matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.set_env_matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    steps:
      - name: Fix directory permissions
        run: |
          set -e
          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
          mkdir -p $AZURE_CONFIG_DIR

      - name: Setup Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Azure Login
        env:
          ARM_CLIENT_ID: ${{ secrets.AZ_APP_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZ_APP_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{fromJson(secrets.SUB_IDS)[matrix.environments.name]}}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        run: |
          az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} -t ${ARM_TENANT_ID}
          env
          echo "THIS IS SUBS IDS: ${ARM_SUBSCRIPTION_ID}"
          az account set -s ${ARM_SUBSCRIPTION_ID}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform plan
        env:
          ENV: ${{ matrix.environments.name }}
          OPA_BLAST_RADIUS: ${{ github.event.inputs.OPA_BLAST_RADIUS }}
          servicePrincipalId: ${{ secrets.AZ_APP_ID }}
          servicePrincipalKey: ${{ secrets.AZ_APP_SECRET }}
          tenantId: ${{ secrets.TENANT_ID }}
        run: |
          set -e
          if [ -n "${OPA_BLAST_RADIUS}" ] && [ "${OPA_BLAST_RADIUS}" -eq "${OPA_BLAST_RADIUS}" ] 2>/dev/null; then
            echo OPA_BLAST_RADIUS: ${OPA_BLAST_RADIUS}
          else
            export OPA_BLAST_RADIUS=50
            echo OPA_BLAST_RADIUS: ${OPA_BLAST_RADIUS}
          fi

          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"

          make prepare

          if [[ "${{ inputs.VALIDATE_ENABLED }}" -eq "True" || "${{ inputs.VALIDATE_ENABLED }}" -eq "true" ]]; then
            make validate
            if [[ $(git status --porcelain) ]]; then
              git diff
              echo 'run make validate and commit changes' 1>&2
              exit 1
            fi
          fi
          make plan
          az logout

      - name: Upload artifact (encrypted plan)
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.environments.name }}-plan
          path: ${{ env.DIR }}/.terraform/plans/${{ matrix.environments.name }}.enc
          if-no-files-found: error

  terraform_apply:
    needs: [set_env_matrix, terraform_plan]
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix: ${{fromJson(needs.set_env_matrix.outputs.matrix)}}
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Fix directory permissions
        run: |
          set -e
          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
          mkdir -p $AZURE_CONFIG_DIR
          sudo chown -R $(id -u):$(id -g) ${AZURE_CONFIG_DIR}
          sudo chown -R $(id -u):$(id -g) ${PWD}

      - name: Setup Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Azure Login
        env:
          ARM_CLIENT_ID: ${{ secrets.AZ_APP_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZ_APP_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{fromJson(secrets.SUB_IDS)[matrix.environments.name]}}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
        run: |
          env
          az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} -t ${ARM_TENANT_ID}
          az account set -s ${ARM_SUBSCRIPTION_ID}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Create Terraform plan folder
        env:
          TERRAFORM_PLAN_FOLDER: ${{ env.DIR }}/.terraform/plans/
        run: |
          mkdir -p ${TERRAFORM_PLAN_FOLDER}
      - name: Download artifact (encrypted plan)
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.environments.name }}-plan
          path: ${{ env.DIR }}/.terraform/plans/

      - name: Terraform apply
        env:
          ENV: ${{ matrix.environments.name }}
          servicePrincipalId: ${{ secrets.AZ_APP_ID }}
          servicePrincipalKey: ${{ secrets.AZ_APP_SECRET }}
          tenantId: ${{ secrets.TENANT_ID }}
        run: |
          # pre github actions
          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
          make apply DIR=${DIR} ENV=${ENV}
          ERROR_CODE=$?
          # post github actions
          az logout
          exit $ERROR_CODE
