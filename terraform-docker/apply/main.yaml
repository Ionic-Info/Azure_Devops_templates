parameters:
  - name: poolNameTemplate
    type: string
    default: ""
  - name: poolVmImage
    type: string
    default: "ubuntu-18.04"
  - name: sourceBranch
    type: string
    default: "refs/heads/master"
  - name: azureSubscriptionTemplate
    type: string
  - name: terraformFolder
    type: string
  - name: environments
    type: object
    default:
      - name: dev
      - name: qa
      - name: prod

stages:
  - ${{ each env in parameters.environments }}:
      - stage: apply_${{ env.name }}
        displayName: ${{ env.name }}
        condition: and(succeeded(), eq(variables['Build.sourceBranch'], '${{ parameters.sourceBranch }}'))
        jobs:
          - deployment: ${{ env.name }}
            pool:
              ${{ if not(eq(parameters.poolNameTemplate, '')) }}:
                name: ${{ format(parameters.poolNameTemplate, env.name) }}
              ${{ if not(eq(parameters.poolVmImage, '')) }}:
                vmImage: ${{ parameters.poolVmImage }}
            environment: ${{ env.name }}
            displayName: Terraform Apply
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self
                      displayName: Get sources

                    - bash: |
                        mkdir -p ${TERRAFORM_PLAN_FOLDER}
                      env:
                        TERRAFORM_PLAN_FOLDER: $(Build.Repository.LocalPath)/${{ parameters.terraformFolder }}/.terraform/plan
                      displayName: Create terraform plan folder

                    - task: DownloadPipelineArtifact@2
                      displayName: "Download artifact"
                      inputs:
                        artifact: "${{ env.name }}.enc"
                        path: $(Build.Repository.LocalPath)/${{ parameters.terraformFolder }}/.terraform/plans

                    - task: AzureCLI@1
                      displayName: "Apply"
                      inputs:
                        azureSubscription: ${{ format(parameters.azureSubscriptionTemplate, env.name) }}
                        addSpnToEnvironment: true
                        scriptLocation: inlineScript
                        inlineScript: |
                          # pre-azdo
                          set -e
                          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
                          mkdir -p ${PWD}/${DIR}/.terraform/
                          echo ARM_CLIENT_ID=${servicePrincipalId} > ${PWD}/${DIR}/.terraform/${ENV}.env
                          echo ARM_CLIENT_SECRET=${servicePrincipalKey} >> ${PWD}/${DIR}/.terraform/${ENV}.env
                          echo ARM_TENANT_ID=${tenantId} >> ${PWD}/${DIR}/.terraform/${ENV}.env
                          echo ARM_SUBSCRIPTION_ID=$(az account show -o tsv --query 'id') >> ${PWD}/${DIR}/.terraform/${ENV}.env
                          set +e
                          sudo chown -R 1000:1000 ${PWD}/${DIR}
                          sudo chown -R 1000:1000 ${AZURE_CONFIG_DIR}
                          sudo chown -R 1000:1000 ${PWD}/global.tfvars

                          make apply
                          ERROR_CODE=$?

                          # post-azdo
                          sudo chown -R $(id -u):$(id -g) ${PWD}/${DIR}
                          sudo chown -R $(id -u):$(id -g) ${AZURE_CONFIG_DIR}
                          sudo chown -R $(id -u):$(id -g) ${PWD}/global.tfvars
                          exit $ERROR_CODE
                      env:
                        DIR: ${{ parameters.terraformFolder }}
                        ENV: ${{ env.name }}
