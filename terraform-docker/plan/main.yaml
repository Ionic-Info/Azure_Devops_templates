parameters:
  - name: poolNameTemplate
    type: string
    default: ""
  - name: poolVmImage
    type: string
    default: "ubuntu-18.04"
  - name: sourceBranch
    type: string
    default: "refs/heads/master"
  - name: environments
    type: object
    default:
      - name: dev
      - name: qa
      - name: prod
  - name: azureSubscriptionTemplate
    type: string
  - name: terraformFolder
    type: string
  - name: validateEnabled
    type: boolean
    default: true
stages:
  - stage: plan
    jobs:
      - ${{ each env in parameters.environments }}:
          - job: ${{ env.name }}
            pool:
              ${{ if not(eq(parameters.poolNameTemplate, '')) }}:
                name: ${{ format(parameters.poolNameTemplate, env.name) }}
              ${{ if not(eq(parameters.poolVmImage, '')) }}:
                vmImage: ${{ parameters.poolVmImage }}
            steps:
              - task: AzureCLI@1
                inputs:
                  azureSubscription: ${{ format(parameters.azureSubscriptionTemplate, env.name) }}
                  addSpnToEnvironment: true
                  scriptLocation: inlineScript
                  inlineScript: |
                    if [ -n "${OPA_BLAST_RADIUS}" ] && [ "${OPA_BLAST_RADIUS}" -eq "${OPA_BLAST_RADIUS}" ] 2>/dev/null; then
                      echo OPA_BLAST_RADIUS: ${OPA_BLAST_RADIUS}
                    else
                      export OPA_BLAST_RADIUS=50
                      echo OPA_BLAST_RADIUS: ${OPA_BLAST_RADIUS}
                    fi

                    # pre-azdo
                    set -e
                    AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
                    mkdir -p ${PWD}/${DIR}/.terraform/
                    echo ARM_CLIENT_ID=${servicePrincipalId} > ${PWD}/${DIR}/.terraform/${ENV}.env
                    echo ARM_CLIENT_SECRET=${servicePrincipalKey} >> ${PWD}/${DIR}/.terraform/${ENV}.env
                    echo ARM_TENANT_ID=${tenantId} >> ${PWD}/${DIR}/.terraform/${ENV}.env
                    echo ARM_SUBSCRIPTION_ID=$(az account show -o tsv --query 'id') >> ${PWD}/${DIR}/.terraform/${ENV}.env
                    set +e
                    sudo chown -R 1000:1000 ${PWD}/${DIR}
                    sudo chown -R 1000:1000 ${AZURE_CONFIG_DIR}
                    sudo chown -R 1000:1000 ${PWD}/global.tfvars

                    PREPARE_ERROR_CODE=0
                    make prepare
                    PREPARE_ERROR_CODE=$?

                    VALIDATE_ERROR_CODE=0
                    GIT_STATUS_CODE=0
                    if [[ "${VALIDATE_ENABLED}" == "True" ]]; then
                      make validate
                      VALIDATE_ERROR_CODE=$?

                      if [[ $(git status --porcelain) ]]; then
                        git diff
                        echo 'run make validate and commit changes'
                        GIT_STATUS_CODE=1
                      fi
                    fi

                    if [[ ${PREPARE_ERROR_CODE} = 0 && ${VALIDATE_ERROR_CODE} = 0 && ${GIT_STATUS_CODE} = 0 ]]; then
                      make plan
                      PLAN_ERROR_CODE=$?
                    fi

                    # post-azdo
                    sudo chown -R $(id -u):$(id -g) ${PWD}/${DIR}
                    sudo chown -R $(id -u):$(id -g) ${AZURE_CONFIG_DIR}
                    sudo chown -R $(id -u):$(id -g) ${PWD}/global.tfvars

                    if [[ ${PREPARE_ERROR_CODE} != 0 ]]; then
                      echo "ERROR: PREPARE failed."
                      exit ${PREPARE_ERROR_CODE}
                    elif [[ ${VALIDATE_ERROR_CODE} != 0 ]]; then
                      echo "ERROR: VALIDATE failed."
                      exit ${VALIDATE_ERROR_CODE}
                    elif [[ ${GIT_STATUS_CODE} != 0 ]]; then
                      echo "ERROR: git status not clean. Run make validate and commit changes."
                      exit ${GIT_STATUS_CODE}
                    elif [[ ${PLAN_ERROR_CODE} != 0 ]]; then
                      echo "ERROR: PLAN failed."
                      exit ${PLAN_ERROR_CODE}
                    else
                      echo "INFO: Completed successfully."
                      exit 0
                    fi
                env:
                  DIR: ${{ parameters.terraformFolder }}
                  ENV: ${{ env.name }}
                  OPA_BLAST_RADIUS: $(opaBlastRadius)
                  VALIDATE_ENABLED: ${{ parameters.validateEnabled }}
                displayName: "Terraform Plan"

              - task: PublishPipelineArtifact@0
                inputs:
                  targetPath: $(Build.Repository.LocalPath)/${{ parameters.terraformFolder }}/.terraform/plans
                  artifactName: "${{ env.name }}.enc"
                displayName: "Publish artifact"
