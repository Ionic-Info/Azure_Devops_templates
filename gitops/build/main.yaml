parameters:
  - name: poolVmImage
    type: string
    default: "ubuntu-16.04"
  - name: poolName
    type: string
    default: ""
  - name: sourceBranch
    type: string
    default: "refs/heads/master"
  - name: dockerfilePath
    type: string
    default: "./Dockerfile"
  - name: dockerBuildArgs
    type: string
    default: ""
  - name: serviceName
    type: string
    default: ""
  - name: preBuild
    type: stepList
    default: []
  - name: postBuild
    type: stepList
    default: []
  - name: dockerLint
    type: object
    default:
      enable: true
      ignoreRuleViolations: true
  - name: binaries
    type: object
    default:
      hadolint:
        tag: "v1.18.0"
        sha: "f9bc9de12438b463ca84e77fde70b07b155d4da07ca21bc3f4354a62c6199db4"
stages:
  - stage: build
    jobs:
      - job: image
        pool:
          ${{ if not(eq(parameters.poolName, '')) }}:
            name: ${{ parameters.poolName }}
          ${{ if not(eq(parameters.poolVmImage, '')) }}:
            vmImage: ${{ parameters.poolVmImage }}
        continueOnError: false
        steps:
          - bash: |
              set -e
              IMAGE_ID=${SERVICE_NAME}:${SOURCE_VERSION:0:7}
              echo "##vso[task.setvariable variable=imageId]$IMAGE_ID"
            displayName: "Create image id"
            env:
              SERVICE_NAME: ${{ parameters.serviceName }}
              SOURCE_VERSION: $(Build.SourceVersion)
          - ${{ parameters.preBuild }}
          - bash: |
                set -ex
                # Download
                wget https://github.com/hadolint/hadolint/releases/download/${HADOLINT_TAG}/hadolint-Linux-x86_64
                DOWNLOAD_HADOLINT_SHA=$(openssl sha1 -sha256 hadolint-Linux-x86_64 | awk '{print $2}')
                if [[ "${HADOLINT_SHA}" != "${HADOLINT_SHA}" ]]; then
                    echo "Downloaded checksum (${DOWNLOAD_HADOLINT_SHA}) for hadolint does not match expected value: ${HADOLINT_SHA}"
                    exit 1
                fi
                chmod +x hadolint-Linux-x86_64
                mv hadolint-Linux-x86_64 /usr/bin/hadolint
                # Run
                hadolint ${DOCKERFILE_PATH}
            displayName: Dockerfile Lint
            continueOnError: ${{ parameters.dockerLint.ignoreRuleViolations }}
            env:
              HADOLINT_TAG: ${{ parameters.binaries.hadolint.tag }}
              HADOLINT_SHA: ${{ parameters.binaries.hadolint.sha }}
              DOCKERFILE_PATH: ${{ parameters.dockerfilePath }}
            condition: and(succeeded(), eq(${{ parameters.dockerLint.enable }}, true))
          - bash: |
              set -ex
              docker build -f ${DOCKERFILE_PATH} ${DOCKER_BUILD_ARGS} -t ${IMAGE_ID} ${DOCKER_BUILD_ARGS} .
              docker save ${IMAGE_ID} | gzip > ${IMAGE_ID}.tar.gz
            env:
              DOCKERFILE_PATH: ${{ parameters.dockerfilePath }}
              IMAGE_ID: $(imageId)
              DOCKER_BUILD_ARGS: ${{ parameters.dockerBuildArgs }}
            displayName: "Build and save image"
            condition: and(succeeded(), eq(variables['Build.sourceBranch'], '${{ parameters.sourceBranch }}'))
          - ${{ parameters.postBuild }}
          - task: PublishPipelineArtifact@1
            displayName: "Publish Azure Pipelines Artifact"
            inputs:
              targetPath: $(imageId).tar.gz
              artifactName: ${{ parameters.serviceName }}
            condition: and(succeeded(), eq(variables['Build.sourceBranch'], '${{ parameters.sourceBranch }}'))
